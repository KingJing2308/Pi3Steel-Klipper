[gcode_macro SHUTDOWN_MACHINE]
gcode:
    {action_call_remote_method("shutdown_machine")}
    M81

[gcode_macro heating]
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=85
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=230
    STSTUS_HEATING

[gcode_macro START_PRINT]
variable_retract: 3
gcode:
    M117 Heating
    SET_PIN PIN=caselight VALUE=0.6
    STATUS_HEATING
    {% set extruder_temp = params.EXTRUDER_TEMP|default(220)|float %}
    {% set bed_temp = params.BED_TEMP|default(70)|float %}
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    CLEAR_PAUSE
    M220 S100                                                                   # reset feedrate
    M221 S100
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                  # set bed t℃
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp * 0.90}                # wait until bed is partially heated
    #G4 P300000                
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set nozzle t℃
    G90                                                                         # absolute positioning
    M82                                                                         # absolute extrusion mode
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                       # wait until
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                    # wait until\
    M117 Home
    STATUS_HOMING
    G28
    CLEANING
#    Z_TILT_ADJUST
    G0 Z10 F1500                                                                # raise Z
    G92 E0                                                                      # reset extruder
    G1 E{E} F1500                                                               # prime
    G92 E0
    BED_MESH_PROFILE LOAD=default                                                                       # reset extruder
    M117 Printing...
    STATUS_PRINTING

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    TURN_OFF_HEATERS
    M107                                                                        # turn off fan
    G91
    G1 E-{E} F1500                                                              # retract
    G90
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    PARK
    M18

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G91
    G1 E-{E} F1500                                                              # retract
    G90
    PARK

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    G91
    G1 E{E} F1500                                                               # unretract
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
    BASE_RESUME
    STATUS_PRINTING

[gcode_macro PID_E]
gcode:
    {% set T = params.T|default(240) %}
    PID_CALIBRATE HEATER=extruder TARGET={T}

[gcode_macro PID_B]
gcode:
    {% set T = params.T|default(80) %}
    PID_CALIBRATE HEATER=heater_bed TARGET={T}

[gcode_macro MOTOR_OFF]
gcode:
    M18

[gcode_macro M81]
gcode:
    SET_PIN PIN=POWER_OFF VALUE=1

[output_pin POWER_OFF]
pin: PC8
shutdown_value: 1

[gcode_macro M81]
gcode:
  SET_PIN PIN=POWER_OFF VALUE=1

[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z10 F240
    G1 X150 Y155 F6000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}

[gcode_macro M207]
gcode:
    {% set length = params.S|default(1.5)|float %}
    {% set speed = params.F|default(25)|float %}
    SET_RETRACTION RETRACT_LENGTH={length} RETRACT_SPEED={speed}

[gcode_macro M208]
gcode:
    {% set length = params.S|default(1.5)|float %}
    {% set speed = params.F|default(25)|float %}
    SET_RETRACTION UNRETRACT_EXTRA_LENGTH={length} UNRETRACT_SPEED={speed}

[gcode_macro PARK]
gcode:
    STATUS_MESHING
    {% set x_park = params.X|default(10)|float %}
    {% set y_park = params.Y|default(180)|float %}
    {% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
    {% set x_max = printer.toolhead.axis_maximum.x|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set z_max = printer.toolhead.axis_maximum.z|float %}
    {% if x_park > x_max %}
        {% set x_park = x_max %}
    {% endif %}
    {% if y_park > y_max %}
        {% set y_park = y_max %}
    {% endif %}
    {% if z_park > z_max %}
        {% set z_park = z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK_STATE
    G90                                                                         # absolute positioning
    G1 Z{z_park} F1500
    G1 X{x_park} Y{y_park} F5000
    RESTORE_GCODE_STATE name=PARK_STATE